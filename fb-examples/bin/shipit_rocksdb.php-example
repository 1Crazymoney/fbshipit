<?hh
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

require_once(__DIR__.'/../autoload.php');

final class ShipItRocksDB extends FBShipItCLI {
  const string INTERNAL_REPO_PATH = 'fbcode/internal_repo_rocksdb/repo/';

  <<__Override>>
  protected static function projectFilterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset
      |> FBCommonFilters::applyAll($$,
        shape(
          // We want to keep .mk and TARGETS files for native code
          'stripCommonFiles/exceptions' => ImmVector {
            '@\.mk$@',
            '@TARGETS$@',
          },
        ),
      )
      |> ShipItPathFilters::stripPaths(
        $$,
        ImmVector {
          // Ignore file containing sandcastle token
          '@^' . self::INTERNAL_REPO_PATH . '.sandcastle$@',
          // Arcanist, only used internally
          '@^' . self::INTERNAL_REPO_PATH . 'arcanist_util/@',
          '@^' . self::INTERNAL_REPO_PATH . '.arcconfig$@',
        },
      )
      |> ShipItPathFilters::moveDirectories($$, static::getPathMappings());
  }

  <<__Override>>
  public static function getPathMappings(): ImmMap<string, string> {
    return ImmMap {
      self::INTERNAL_REPO_PATH => '',
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebook',
      'githubProject' => 'rocksdb',
    );
  }
}

// Allow require() from unit test
if (isset($argv) && realpath($argv[0]) === realpath(__FILE__)) {
  ShipItRocksDB::cliMain();
}
