<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBGitHubUtils,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBShipItPublicizeSyncScriptsPhase,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItBaseConfig,
  ShipItChangeset,
  ShipItGitHubCredentials,
  ShipItGitHubUtils,
  ShipItPathFilters,
  ShipItPhase,
  ShipItSyncPhase,
};

final class FacebookFbshipit extends FBShipItConfig {
  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebook',
      'githubProject' => 'fbshipit',
    );
  }

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> str_replace('/public_tld/dot_', '/public_tld/.', $path),
      )
      |> parent::defaultProjectFilterChangeset($$, $get_path_mappings)
      |> self::removePrivateProjects($$)
      |> self::changeExampleExtensions($$);
  }

  <<__Override>>
  protected static function getStripCommonFilesExceptions(): ImmVector<string> {
    return ImmVector {
      '@^fbcode/opensource/shipit/config/.*$@',
    };
  }

  <<__Override>>
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      '@/fb-private/@',
      // Replacement implementation in public_tld
      '@(^|/)autoload.php$@',
      '@(^|fbcode/opensource/shipit/)composer.json$@',
      '@(^|/)fb_.+\.sh$@',
      '@(^|/)fb_.+\.py$@',
      '@(^|/)bin/generate-autoload-map.php@',
    };
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      'fbcode/opensource/shipit/public_tld/' => '',
      'fbcode/opensource/shipit/bin/' => 'fb-examples/bin/',
      'fbcode/opensource/shipit/config/fb-specific-but-public/' =>
        'fb-examples/config/',
      'fbcode/opensource/shipit/src/config/fb-specific-but-public/' =>
        'fb-examples/lib/config/',
      'fbcode/opensource/shipit/src/importit/fb-specific-but-public/' =>
        'fb-examples/lib/importit/',
      'fbcode/opensource/shipit/tests/importit/fb-specific-but-public/' =>
        'fb-examples/tests/importit/',
      'fbcode/opensource/shipit/src/shipit/fb-specific-but-public/' =>
        'fb-examples/lib/shipit/',
      'fbcode/opensource/shipit/tests/shipit/fb-specific-but-public/' =>
        'fb-examples/tests/shipit/',
      'fbcode/opensource/shipit/tests/config/fb-specific-but-public/' =>
        'fb-examples/tests/config/',
      'fbcode/opensource/shipit/src/' => 'src/',
      'fbcode/opensource/shipit/tests/' => 'tests/',
      'fbcode/opensource/shipit/.hhconfig' => '.hhconfig',
    };
  }

  <<__Override>>
  public static function getPhases(
    FBSourceBranchConfig $branch_config,
  ): ImmVector<ShipItPhase> {
    $original_phases = parent::getPhases($branch_config);
    $phases = Vector {};
    foreach ($original_phases as $phase) {
      if ($phase instanceof ShipItSyncPhase) {
        $phases[] = new FBShipItPublicizeSyncScriptsPhase(
          $changeset ==> self::filterChangeset($changeset, $branch_config),
        );
      }
      $phases[] = $phase;
    }
    invariant(
      $phases->count() === $original_phases->count() + 1,
      'Expected to add an additional phase',
    );
    return $phases->toImmVector();
  }

  <<__Override>>
  public static function getBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    return parent::getBaseConfig($branch_config)->withSourceRoots(
      ImmSet { 'fbcode/opensource/shipit/' },
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> self::reverseExampleExtensions($$)
      |> parent::projectImportChangeset($$, $branch_config)
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> str_replace('/public_tld/.', '/public_tld/dot_', $path),
      );
  }

  /**
   * Rename fb-examples/foo.php-example to fb-examples/foo.php.
   *
   * Inverse of changeExampleExtensions.
   */
  private static function reverseExampleExtensions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> preg_replace('@^(fb-examples/.+\.php)-example$@', '\1', $path),
    );
  }

  /**
   * Rename fb-examples/foo.php to fb-examples/foo.php-example.
   *
   * These files depend on some private code (eg fetching GitHub API tokens) -
   * so if these are .php files, the typechecker will fail.
   */
  private static function changeExampleExtensions(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> preg_replace('@^fb-examples/.+\.php$@', '\0-example', $path),
    );
  }

  private static function removePrivateProjects(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $diffs = Vector {};
    foreach ($changeset->getDiffs() as $diff) {
      if (!self::isFileForPrivateProject($diff['path'])) {
        $diffs[] = $diff;
        continue;
      }
      $changeset = $changeset->withDebugMessage(
        'SKIP FILE - private project: %s',
        $diff['path'],
      );
    }
    return $changeset->withDiffs($diffs->toImmVector());
  }

  private static function getProjectFilePatterns(): ImmSet<string> {
    return ImmSet {
      '@(^|/)bin/importit_(?<project>[^/]+)\.php$@',
      '@(^|/)bin/shipit_(?<project>[^/]+)\.php$@',
      '@(^|/)tests(/[^/]+)*/projects/(?<project>[^/]+)Test\.php$@',
    };
  }

  <<__Memoize>>
  private static function isFileForPrivateProject(string $path): ?bool {
    $public_projects = self::getPublicProjects()->map($x ==> strtolower($x));

    foreach (self::getProjectFilePatterns() as $pattern) {
      $matches = [];
      if (preg_match($pattern, $path, &$matches)) {
        return !$public_projects->contains(strtolower($matches['project']));
      }
    }
    return false;
  }

  <<__Memoize>>
  private static function getPublicProjects(): ImmSet<string> {
    $sanity_checks = ImmVector {
      // facebook/
      'hhvm',
      'buck',
      'react-native',
      'relay',
      // facebookarchive/
      'squangle',
      // facebookincubator/
      'CommunityCellularManager',
    };
    $orgs = ImmVector {
      'caffe2',
      'facebook',
      'facebookarchive',
      'facebookexperimental',
      'facebookincubator',
      'hhvm',
      'instagram',
    };
    $credentials =
      FBGitHubUtils::getCredentialsForProject('facebook', 'shipit');
    $org_projects = \HH\Asio\join(\HH\Asio\m(
      $orgs->map(
        async $org ==> await self::getPublicProjectsForOrg($credentials, $org),
      ),
    ));
    $all_projects = Set {};
    foreach ($org_projects as $projects) {
      $all_projects->addAll($projects);
    }
    $all_projects = $all_projects->immutable();

    foreach ($sanity_checks as $sanity_check) {
      invariant(
        $all_projects->contains($sanity_check),
        'Expected %s to be in the list of public repos - got %s',
        $sanity_check,
        implode(', ', $all_projects),
      );
    }
    return $all_projects;
  }

  private static async function getPublicProjectsForOrg(
    ShipItGitHubCredentials $credentials,
    string $org,
  ): Awaitable<ImmSet<string>> {
    $responses = await ShipItGitHubUtils::makeAPIRequest(
      $credentials,
      '/orgs/'.$org.'/repos?type=public',
    );
    $repos = Vector {};
    foreach ($responses as $response) {
      $partial_repos = json_decode($response, /* as array = */ true);
      if ($partial_repos === null) {
        fprintf(STDERR, "Failed to decode JSON: %s\n", $response);
        exit(1);
      }
      if (!is_array($partial_repos)) {
        fprintf(STDERR, "Expected array of repos, got %s\n", $response);
        exit(1);
      }
      $repos->addAll($partial_repos);
    }

    $repos = $repos
      ->filter($repo ==> $repo['private'] === false)
      ->map($repo ==> $repo['name'])
      ->toImmSet();
    return $repos;
  }
}
