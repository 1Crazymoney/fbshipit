<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/vthuww43
 */
namespace Facebook\ShipIt\Config;

use type Facebook\ShipIt\{
  FBCommonFilters,
  FBOpenbmcCommonFilters,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItException,
  ShipItPathFilters,
  ShipItUtil,
};

final class FacebookOpenbmc extends FBShipItConfig {
  <<__Override>>
  public function forceConfigeratorGenerationWithHackPlugin(): string {
    return FacebookOpenbmcPlugin::class;
  }

  <<__Override>>
  public function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::stripPaths($$, $this->getDefaultStrippedFiles())
      |> ShipItPathFilters::moveDirectories($$, $get_path_mappings())
      |> FBOpenbmcCommonFilters::applyAll($$, 'openbmc')
      |> FBCommonFilters::applyAll(
        $$,
        shape(
          // skip all the default strips.
          'stripCommonFiles/exceptions' =>
            $this->getStripCommonFileExceptions(),
          'filterMessageSections/keepFields' => ImmSet {
            'summary',
            'pulled by',
            'reviewed by',
            'test plan',
          },
        ),
      );
  }

  <<__Override>>
  public function getStripCommonFileExceptions(): ImmVector<string> {
    // skip all the default strips.
    return ImmVector {
      '/.*/',
    };
  }

  <<__Override>>
  public function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      // Explicitly remove the recipe files which will be replaced by the
      // github directory contents.
      '@^meta-facebook/classes/fb-only-network.bbclass@',
      '@^meta-aspeed/recipes-bsp/u-boot/u-boot.*@',
      '@^meta-aspeed/recipes-bsp/u-boot/verified-boot.inc@',
      '@^meta-aspeed/recipes-kernel/linux/linux-.*@',
      # Remove linux and uboot patches (for now, resolve independently).
      '@^meta-aspeed/recipes-kernel/linux/files/linux-.*@',
      '@^meta-aspeed/recipes-bsp/u-boot/files/u-boot.*@',
      # Yocto releases are internal only.
      '@^yocto@',
      '@^.gitmodules@',
      '@^github/.gitmodules@',
      # Anything marked 'private' should not be synced.
      '@^.*private@',
      # Top level and sublevel directories named as facebook
      '@^facebook/@',
      '@/facebook/@',
      # Remove private/confidential projects
    };
  }

  <<__Override>>
  public function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      # Provide an overlay to keep patches locally for various
      # minor tweaks to the github tree.
      'github/meta-facebook/classes/fb-only-network.bbclass' =>
        'meta-facebook/classes/fb-only-network.bbclass',
      'github/sync_yocto.sh' => 'sync_yocto.sh',
      'github/yocto/.gitignore' => 'yocto/.gitignore',
      'github/meta-aspeed' => 'meta-aspeed',
      # Keep the rest where it was
      '' => '',
    };
  }

  <<__Override>>
  public function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'meta-openbmc',
      'githubOrg' => 'facebook',
      'githubProject' => 'openbmc',
    );
  }

  <<__Override>>
  public function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    return ImmVector {
      shape(
        'internal' => 'fido',
        'external' => 'master',
      ),
      shape(
        'internal' => 'helium',
        'external' => 'helium',
      ),
    };
  }

  public static function getUnsupportedImportPaths(): ImmVector<string> {
    return ImmVector {
      '@^meta-facebook/classes/fb-only-network.bbclass@',
      '@^sync_yocto.sh@',
      '@^yocto/.gitignore@',
      '@^meta-aspeed/.*$@',
    };
  }

  <<__Override>>
  public function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $_branch_config,
  ): ShipItChangeset {
    return $changeset
      // These files are replaced by GitHub specific versions
      // at shipit time and should never come back to us on import
      // with modifications.
      |> self::errorOnPaths($$, static::getUnsupportedImportPaths());
  }

  <<\TestsBypassVisibility>>
  private static function errorOnPaths(
    ShipItChangeset $changeset,
    ImmVector<string> $unsupported_path_patterns,
  ): ShipItChangeset {
    foreach ($changeset->getDiffs() as $diff) {
      $path = $diff['path'];

      $match = ShipItUtil::matchesAnyPattern($path, $unsupported_path_patterns);

      if ($match !== null) {
        // This could be handled more gracefully in the future.
        throw new ShipItException("Importing changes unsupported: ".$path);
      }
    }

    return $changeset;
  }

  <<__Override>>
  public function getLandBranch(): ?string {
    // ShipIt will assume that diffs will land onto the 'helium' branch.
    return 'helium';
  }
}
