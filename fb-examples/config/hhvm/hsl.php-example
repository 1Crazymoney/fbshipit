<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt\Config;

use \Facebook\ShipIt\ {
  FBSourceBranchConfig,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItConditionalLinesFilter,
  ShipItPathFilters,
};

final class HhvmHsl extends FBShipItConfig {
  const string ROOT = 'flib/core/hack/lib/';

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return parent::defaultProjectFilterChangeset($changeset, $get_path_mappings)
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^src/(.+/)?__tests__/@',
          'tests/\1',
          $path,
        ),
      )
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^bin/(.+)_dot_php$@',
          'bin/\\1.php',
          $path,
        ),
      )
      |> ShipItConditionalLinesFilter::commentLines(
        $$,
        '@oss-disable',
        '//',
      )
      |> ShipItConditionalLinesFilter::uncommentLines(
        $$,
        '@oss-enable',
        '//',
      )
      |> self::renameGenToAsync($$);
  }

  <<__Override>>
  protected static function getDefaultStrippedFiles(): ImmVector<string> {
    return ImmVector {
      '@^flib/core/hack/lib/(legacy|unreleased|async)/@',
      '@^flib/core/hack/lib/__tests__/testing_mocks/@',
    };
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      self::ROOT.'__github__/dot_' => '.',
      self::ROOT.'__github__/' => '',
      self::ROOT => 'src/',
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'www',
      'githubOrg' => 'hhvm',
      'githubProject' => 'hsl',
    );
  }

  private static function renameFunctions(
    ShipItChangeset $changeset,
    (function(string):string) $renamer,
  ): ShipItChangeset {
    $diffs = Vector {};
    foreach ($changeset->getDiffs() as $diff) {
      $diff['body'] = $diff['body']
        |> \explode("\n", $$)
        |> (new ImmVector($$))->map(
          $line ==> \preg_replace_callback(
            // Comma and dot for doc comments
            '/(function |\\\\|\\|>| )([a-zA-Z0-9_]+)(\\(|<|,|\\.)/',
            $matches ==> $matches[1].$renamer($matches[2]).$matches[3],
            $line,
          ),
        )
        |> \implode("\n", $$);
      $diffs[] = $diff;
    }
    return $changeset->withDiffs($diffs->immutable());
  }

  private static function renameGenToAsync(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if ($name === 'gen') {
          return 'from_async';
        }
        if ($name === 'testGen') {
          return 'testFromAsync';
        }
        if (\strpos($name, 'gen_') === 0) {
          return \substr($name, 4).'_async';
        }
        if (\strpos($name, 'testGen') === 0) {
          return 'test'.\substr($name, 7).'Async';
        }
        return $name;
      }
    );
  }

  public static function renameAsyncToGen(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return self::renameFunctions(
      $changeset,
      $name ==> {
        if ($name === 'from_async') {
          return 'gen';
        }
        if ($name === 'testFromAsync') {
          return 'testGen';
        }
        if (\substr($name, -6) === '_async') {
          return 'gen_'.\substr($name, 0, -6);
        }
        if (\substr($name, 0, 4) === 'test' && \substr($name, -5) === 'Async') {
          return 'testGen'.\substr(
            $name,
            4,
            \strlen($name) - 9,
          );
        }
        return $name;
      }
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^tests/(.+/)?@',
          'src/\1__tests__/',
          $path,
        ),
      )
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace(
          '@^bin/(.+)\\.php$@',
          'bin/\\1_dot_php',
          $path,
        ),
      )
      |> ShipItPathFilters::rewritePaths(
        $$,
        $path ==> \preg_replace('/^\\./', 'dot_', $path),
      )
      |> ShipItConditionalLinesFilter::uncommentLines(
        $$,
        '@oss-disable',
        '//',
      )
      |> ShipItConditionalLinesFilter::commentLines(
        $$,
        '@oss-enable',
        '//',
      )
      |> self::renameAsyncToGen($$)
      |> parent::projectImportChangeset($$, $branch_config);
  }
}
