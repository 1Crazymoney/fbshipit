<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

use \Facebook\ImportIt\{
  ImportItPathFilters,
  ImportItSubmoduleFilter,
  ImportItSyncPhase,
};

type GetPathMappingsFn = (function(): ImmMap<string, string>);

type FBSourceBranchConfig = shape(
  'internal' => string,
  'external' => string,
  ?'projectFilterChangeset' =>
    (function(ShipItChangeset, GetPathMappingsFn): ShipItChangeset),
  ?'getPathMappings' => GetPathMappingsFn,
);

/** Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg shipit_hhvm.php and shipit_buck.php)
 */
abstract class FBShipItConfig implements IHasFBShipItCLIStaticConfig {

  public abstract static function getDefaultPathMappings(
  ): ImmMap<string, string>;

  protected abstract static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset;

  // Public so that you can add a unit test
  final public static function filterChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> self::stripExceptSourceRoots($$, $branch_config)
      |> self::filterSubmodules($$)
      |> (
        self::getProjectFilterChangesetFn($branch_config)
      )($$, self::getPathMappingsFn($branch_config))
      |> FBConfidentialFilter::applyAll($$);
  }

  public static function getSubmoduleMappings(): ImmMap<string, string> {
    return ImmMap {};
  }

  private static function getSourceRoots(
    FBSourceBranchConfig $branch_config,
  ): ImmSet<string> {
    $config = static::getStaticConfig();
    $paths = (self::getPathMappingsFn($branch_config))()
      ->keys()
      ->toSet();
    $interfaces = new Set(class_implements(static::class));
    if (
      !$interfaces->contains(ISupportsFBCodeBuilder::class) &&
      $config['internalRepo'] === 'fbsource' &&
      !static::getSubmoduleMappings()->isEmpty()
    ) {
      // Add the default project hashes folder.  This is stripped after we add
      // any submodules.
      $paths->add('fbcode/opensource/project_hashes/');
    }

    if ($paths->contains('')) {
      // All paths are included.
      return ImmSet {};
    }
    $paths = $paths->toArray();
    // Sort least specific to most specific.
    sort($paths);
    $roots = Set {};
    foreach ($paths as $path) {
      // If this path starts with any elements in the set of roots we have
      // already computed, we do not need to add this as it would be redundant.
      $root_match = false;
      foreach ($roots as $root) {
        $root_match = $root_match || strncmp($path, $root, strlen($root)) === 0;
      }
      if ($root_match) {
        continue;
      }
      $roots->add($path);
    }
    return $roots->toImmSet();
  }

  public static function getBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    return (
      new ShipItBaseConfig(
        '/var/tmp/fbshipit',
        /* source_dir = */ $static_config['internalRepo'],
        Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        self::getSourceRoots($branch_config),
      )
    )
      ->withSourceBranch($branch_config['internal'])
      ->withDestinationBranch($branch_config['external']);
  }

  final protected static function stripExceptSourceRoots(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    $roots = static::getBaseConfig($branch_config)->getSourceRoots()
      ->filter($root ==> $root !== '');
    if (count($roots) === 0) {
      return $changeset;
    }

    return ShipItPathFilters::stripExceptDirectories($changeset, $roots);
  }

  final protected static function filterSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (static::getSubmoduleMappings()->isEmpty()) {
      return $changeset;
    }
    foreach (static::getSubmoduleMappings() as $source => $dest) {
      $changeset = ShipItSubmoduleFilter::useSubmoduleCommitFromTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    $interfaces = new Set(class_implements(static::class));
    if ($interfaces->contains(ISupportsFBCodeBuilder::class)) {
      // FBCodeBuilder needs these hashes, but doesn't use them as submodules.
      return $changeset;
    }
    return $changeset
      |> ShipItPathFilters::stripPaths(
        $$,
        ImmVector {
          '@^fbcode/opensource/project_hashes/@',
        },
        ImmVector {
          '@^fbcode/opensource/project_hashes/shipit_test_file.txt$@',
        },
      );
  }

  public static function getPhases(
    FBSourceBranchConfig $branch_config,
  ): ImmVector<ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getBaseConfig($branch_config);

    return ImmVector {
      new ShipItFilterSanityCheckPhase(
        $changeset ==> self::filterChangeset($changeset, $branch_config),
      ),
      new ShipItSaveConfigPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
      ),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new FBRepoInitPhase(
        ShipItRepoSide::SOURCE,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new ShipItCreateNewRepoPhase(
        $changeset ==> self::filterChangeset($changeset, $branch_config),
        shape(
          'name' => 'facebook-github-bot',
          'email' => 'facebook-github-bot@users.noreply.github.com',
        ),
      ),
      new ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::DESTINATION,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ShipItSyncPhase(
        ($config, $changeset) ==>
          self::filterChangeset($changeset, $branch_config),
      ),
      new ShipItVerifyRepoPhase(
        $changeset ==> self::filterChangeset($changeset, $branch_config),
      ),
      new ShipItPushPhase(),
    };
  }

  //////////////////////////
  //
  // ImportIt Config logic
  //
  //////////////////////////

  /**
   * By default, ImportIt will just update paths.  If a project wants to do
   * something more complicated, they can override this method.
   */
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> self::filterImportSubmodules($$)
      |> ImportItPathFilters::moveDirectories(
        $$,
        (self::getPathMappingsFn($branch_config))(),
        static::getSubmoduleMappings()
          ->keys()
          ->map($path ==> '@^'.$path.'$@'),
      );
  }

  // Public so that you can add a unit test
  final public static function importChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> static::projectImportChangeset($$, $branch_config);
  }

  final public static function getImportBaseConfig(
    FBSourceBranchConfig $branch_config,
  ): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    $shipit_base_config = static::getBaseConfig($branch_config);
    return (
      new ShipItBaseConfig(
        /* base_dir = */ '/var/tmp/fbimportit',
        /* source_dir */ Shapes::idx(
          $static_config,
          'destDirName',
          $static_config['githubProject'],
        ),
        /* dest_dir = */ $static_config['internalRepo'],
        // We assume the entire GitHub repository is being imported.
        /* source_roots = */ ImmSet {},
      )
    )
      ->withSourceBranch($shipit_base_config->getDestinationBranch())
      ->withDestinationBranch($shipit_base_config->getSourceBranch());
  }

  final protected static function filterImportSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    foreach (static::getSubmoduleMappings() as $dest => $source) {
      $changeset = ImportItSubmoduleFilter::moveSubmoduleCommitToTextFile(
        $changeset,
        $source,
        $dest,
      );
    }
    return $changeset;
  }

  public static function getImportPhases(
    FBSourceBranchConfig $branch_config,
  ): ImmVector<\Facebook\ShipIt\ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getImportBaseConfig($branch_config);

    return ImmVector {
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new \Facebook\ShipIt\ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::SOURCE,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new \Facebook\ImportIt\FBRepoInitPhase(
        ShipItRepoSide::DESTINATION,
        $static_config['internalRepo'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ImportItSyncPhase(
        $changeset ==> self::importChangeset($changeset, $branch_config),
      ),
    };
  }

  /**
   * Maps source branches to destination branches.
   * Note: while a single source branch can map to multiple destination
   * branches, you cannot map multiple source branches to one destination
   * branch.
   *
   * If you need to override shipit logic for certain branches,
   * pass override functions into the shape.
   */
  public static function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    return ImmVector {
      shape(
        'internal' => 'master',
        'external' => 'master',
      ),
    };
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  private static function getProjectFilterChangesetFn(
    FBSourceBranchConfig $branch_config,
  ): (function(ShipItChangeset, GetPathMappingsFn): ShipItChangeset) {
    return Shapes::idx(
      $branch_config,
      'projectFilterChangeset',
      ($changeset, $get_path_mappings) ==>
        static::defaultProjectFilterChangeset($changeset, $get_path_mappings),
    );
  }

  /**
   * Uses default function implementation if no override is provided.
   */
  private static function getPathMappingsFn(
    FBSourceBranchConfig $branch_config,
  ): GetPathMappingsFn {
    return Shapes::idx(
      $branch_config,
      'getPathMappings',
      () ==> static::getDefaultPathMappings(),
    );
  }
}
