<?hh // strict
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;


use \Facebook\ShipIt\Config\{FBShipItConfigRegistry};

class FBShipItBranchResolutionPhase extends ShipItPhase {

  public function __construct(
    private classname<FBShipItConfig> $configClass,
    protected ?string $externalBranch = null,
    private bool $listBranches = false,
  ) {}

  <<__Override>>
  protected function isProjectSpecific(): bool {
    return false;
  }

  <<__Override>>
  public function getReadableName(): string {
    return 'Determine branch configs';
  }

  <<__Override>>
  public function getCLIArguments(): ImmVector<ShipItCLIArgument> {
    return ImmVector {
      shape(
        'long_name' => 'external-branch::',
        'description' => 'Only run the config for one external branch',
        'write' => $x ==> $this->externalBranch = $x,
      ),
      shape(
        'long_name' => 'list-branches',
        'description' => "List the external branches, and exit.",
        'write' => $_ ==> $this->listBranches = true,
      ),
    };
  }

  public function getConfigClass(): classname<FBShipItConfig> {
    return $this->configClass;
  }

  public static function getRunner(
    classname<FBShipItConfig> $config_class,
    FBSourceBranchConfig $branch_config,
  ): ShipItPhaseRunner {
    return new ShipItPhaseRunner(
      $config_class::getBaseConfig($branch_config),
      $config_class::getPhases($branch_config),
    );
  }

  public function getBranchConfigs(): ImmVector<FBSourceBranchConfig> {
    $config_class = $this->configClass;
    $branch_configs = $config_class::getBranchConfigs();
    if ($this->externalBranch !== null) {
      $branch_configs = $branch_configs->filter(
        $branch_config ==> $branch_config['external'] == $this->externalBranch,
      );
      invariant(
        $branch_configs->count() > 0,
        'No ShipIt configuration found for external branch: %s',
        $this->externalBranch,
      );
      invariant(
        $branch_configs->count() === 1,
        'Multiple internal configs found for external branch: %s',
        $this->externalBranch,
      );
    }
    return $branch_configs;
  }

  <<__Override>>
  public function runImpl(ShipItBaseConfig $config): void {
    $config_class = $this->configClass;
    $branch_configs = $this->getBranchConfigs();
    if ($this->listBranches) {
      $land_branch = $config_class::getLandBranch();
      if ($land_branch !== null) {
        \printf("--- Land branch:\n%s\n", $land_branch);
      }
      print("--- Listing branches:\n");
      foreach ($branch_configs as $branch_config) {
        \printf("%s\n", $branch_config['external']);
      }
      exit(0);
    }
    foreach ($branch_configs as $branch_config) {
      \printf(
        "--- Running for branch: (%s, %s)\n",
        $branch_config['internal'],
        $branch_config['external'],
      );
      $runner = static::getRunner($config_class, $branch_config);
      $runner->run();
    }
  }
}
