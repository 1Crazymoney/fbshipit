<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

/** Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg shipit_hhvm.php and shipit_buck.php)
 */
abstract class FBShipItCLI
  implements \Facebook\ImportIt\ISupportsFBImportIt {

  use FBShipItCLITrait;

  <<__Override>>
  public abstract static function getStaticConfig(): FBShipItCLIStaticConfig;

  protected abstract static function projectFilterChangeset(
    ShipItChangeset $changeset
  ): ShipItChangeset;

  // Public so that you can add a unit test
  final public static function filterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset
      |> self::stripExceptSourceRoots($$)
      |> self::filterSubmodules($$)
      |> static::projectFilterChangeset($$)
      |> FBConfidentialFilter::applyAll($$);
  }

  <<__Override>>
  public static function getSubmoduleMappings(): ImmMap<string, string> {
    return ImmMap {};
  }

  private static function getSourceRoots(): ImmSet<string> {
    $config = static::getStaticConfig();
    $paths = static::getPathMappings()
      ->keys()
      ->toSet();
    $interfaces = new Set(class_implements(static::class));
    if (
      !$interfaces->contains(ISupportsFBCodeBuilder::class) &&
      $config['internalRepo'] === 'fbsource' &&
      !static::getSubmoduleMappings()->isEmpty()
    ) {
      // Add the default project hashes folder.  This is stripped after we add
      // any submodules.
      $paths->add('fbcode/opensource/project_hashes/');
    }

    if ($paths->contains('')) {
      // All paths are included.
      return ImmSet {};
    }
    $paths = $paths->toArray();
    // Sort least specific to most specific.
    sort($paths);
    $roots = Set {};
    foreach ($paths as $path) {
      // If this path starts with any elements in the set of roots we have
      // already computed, we do not need to add this as it would be redundant.
      $root_match = false;
      foreach ($roots as $root) {
        $root_match = $root_match || strncmp($path, $root, strlen($root)) === 0;
      }
      if ($root_match) {
        continue;
      }
      $roots->add($path);
    }
    return $roots->toImmSet();
  }

  <<__Override>>
  public static function getBaseConfig(): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    return new ShipItBaseConfig(
      '/var/tmp/fbshipit',
      /* source_dir = */ $static_config['internalRepo'],
      Shapes::idx(
        $static_config,
        'destDirName',
        $static_config['githubProject'],
      ),
      self::getSourceRoots(),
    );
  }

  final protected static function stripExceptSourceRoots(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $roots = static::getBaseConfig()->getSourceRoots()
      ->filter($root ==> $root !== '');
    if (count($roots) === 0) {
      return $changeset;
    }

    return ShipItPathFilters::stripExceptDirectories(
      $changeset,
      $roots,
    );
  }

  final protected static function filterSubmodules(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    if (static::getSubmoduleMappings()->isEmpty()) {
      return $changeset;
    }
    foreach (static::getSubmoduleMappings() as $source => $dest) {
      $changeset = ShipItSubmoduleFilter::useSubmoduleCommitFromTextFile(
          $changeset,
          $source,
          $dest,
        );
    }
    $interfaces = new Set(class_implements(static::class));
    if ($interfaces->contains(ISupportsFBCodeBuilder::class)) {
      // FBCodeBuilder needs these hashes, but doesn't use them as submodules.
      return $changeset;
    }
    return $changeset |>
      ShipItPathFilters::stripPaths(
        $$,
        ImmVector {
          '@^fbcode/opensource/project_hashes/@',
        },
        ImmVector {
          '@^fbcode/opensource/project_hashes/shipit_test_file.txt$@',
        },
      );
  }

  <<__Override>>
  protected static function getPhases(): ImmVector<ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getBaseConfig();

    return ImmVector {
      new ShipItFilterSanityCheckPhase(
        $changeset ==> self::filterChangeset($changeset),
      ),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::SOURCE),
      new ShipItDeleteCorruptedRepoPhase(ShipItRepoSide::DESTINATION),
      new FBRepoInitPhase(
        ShipItRepoSide::SOURCE,
        $static_config['internalRepo'],
      ),
      new ShipItSaveConfigPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::SOURCE),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new ShipItCreateNewRepoPhase(
        $changeset ==> self::filterChangeset($changeset),
        shape(
          'name' => 'facebook-github-bot',
          'email' => 'facebook-github-bot@users.noreply.github.com',
        ),
      ),
      new ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::DESTINATION,
        ShipItTransport::HTTPS,
        FBGitHubUtils::class,
      ),
      // Clean prior to pulling to remove any untracked files at the current
      // revision that may conflict with updates.
      new ShipItCleanPhase(ShipItRepoSide::DESTINATION),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ShipItSyncPhase(
        ($config, $changeset) ==> self::filterChangeset($changeset),
      ),
      new ShipItVerifyRepoPhase(
        $changeset ==> self::filterChangeset($changeset),
      ),
      new ShipItPushPhase(),
    };
  }
}
