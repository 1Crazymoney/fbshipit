<?hh // strict
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

use \Facebook\ShipIt\Config\{FBShipItConfigRegistry, RepoArcanistProject};

type ShipItPreviewInput = shape(
  'arcanistProject' => string,
  'changeset' => ShipItChangesetData,
  'internalBranch' => string,
);

type ShipItPreviewOutput = shape(
  'changeset' => ShipItChangesetData,
  'githubOrg' => string,
  'githubProject' => string,
  'commitMessage' => string,
  'externalBranch' => string,
);


final class FBShipItPreview {

  // TODO consider using a streaming json parser
  const string OBJECT_TERMINATOR = '===END===';

  private ImmSet<classname<FBShipItConfig>> $allConfigClasses;

  public function __construct(): void {
    $this->allConfigClasses = FBShipItConfigRegistry::getShipItConfigClasses();
  }

  private static function decodeInput(string $in): ShipItPreviewInput {
    return \json_decode($in, true);
  }

  private static function encodeOutput(vec<ShipItPreviewOutput> $out): string {
    return \json_encode($out);
  }

  final public function handleChangeset(
    string $arcanist_project,
    string $internal_branch,
    ShipItChangeset $changeset,
  ): vec<ShipItPreviewOutput> {
    try {
        $repo = RepoArcanistProject::getRepo($arcanist_project);
    } catch (InvariantException $e) {
      // If we don't recognize the arcanist project,
      // assume it will ship no commits.
      return vec[];
    }
    $result = vec[];
    foreach ($this->allConfigClasses as $config_class) {
      $repo_config = $config_class::getStaticConfig();
      // Does the repo match this open source project?
      if ($repo === $repo_config['internalRepo']) {
        $branch_configs = $config_class::getBranchConfigs()
          ->filter(
            $branch_config ==> $branch_config['internal'] == $internal_branch,
          );
        foreach ($branch_configs as $branch_config) {
          $transformed_changeset =
            $config_class::filterChangeset($changeset, $branch_config);
          // Does the changeset create any diffs on the open source project?
          if (\count($transformed_changeset->getDiffs()) > 0) {
            $commit_message =
              ShipItRepoGIT::getCommitMessage($transformed_changeset);
            $result[] = shape(
              'changeset' => $transformed_changeset->toData(),
              'githubOrg' => $repo_config['githubOrg'],
              'githubProject' => $repo_config['githubProject'],
              'commitMessage' => $commit_message,
              'externalBranch' => $branch_config['external'],
            );
          }
        }
      }
    }
    return $result;
  }

  private static function getInStream(?string $in_name): resource {
    if ($in_name === null) {
      $in_name = 'php://stdin';
    }
    $resource = \fopen($in_name, 'r');
    invariant($resource !== false, 'Failed to open file: %s', $resource);
    return $resource;
  }

  private static function printHelp(): void {
    \printf(
"Preview ShipIt actions for a given changeset.

The input should be JSON ShipItChangesetData objects,
separated by '%s' terminators.

Usage: %s [-i] [--help]

Options:
  -i      The filename to parse for input (default stdin)
  --help  Print this help message
",
      self::OBJECT_TERMINATOR,
      \basename(__FILE__, ""),
);
  }

  final public function shipItPreview(resource $in_stream): void {
    $in_data = '';
    $line = \fgets($in_stream);
    while ($line !== false) {
      if (\trim($line) === self::OBJECT_TERMINATOR) {
        $parsed = self::decodeInput($in_data);
        $result = $this->handleChangeset(
          $parsed['arcanistProject'],
          $parsed['internalBranch'],
          ShipItChangeset::fromData($parsed['changeset']),
        );
        print (self::encodeOutput($result));
        $in_data = '';
      } else {
        $in_data = $in_data.$line;
      }
      $line = \fgets($in_stream);
    }
  }

  final public static function cliMain(): void {
    $opts = dict(\getopt('i::', vec['help']));
    if (idx($opts, 'help') !== null) {
      self::printHelp();
      return;
    }
    $in_stream = self::getInStream(idx($opts, 'i'));
    (new FBShipItPreview())->shipItPreview($in_stream);
  }
}
