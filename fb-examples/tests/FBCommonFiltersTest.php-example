<?hh
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;


final class FBCommonFiltersTest extends BaseTest {
  public function exampleBadwordChangesets(
  ): array<string, array<ShipItChangeset>> {
    $bw = FBConfidentialFilter::EXAMPLE_BAD_WORD;
    $out = ImmMap {
      'subject' => (new ShipItChangeset())->withSubject($bw),
      'subject lowercase' => (new ShipItChangeset())
        ->withSubject(strtolower($bw)),
      'subject uppercase' => (new ShipItChangeset())
        ->withSubject(strtoupper($bw)),
      'subject substr' => (new ShipItChangeset())
        ->withSubject('foo '.$bw. ' bar'),
      'message' => (new ShipItChangeset())
        ->withMessage('Summary: '.$bw),
      'message line' => (new ShipItChangeset())
        ->withMessage("Summary: Foo\n".$bw."\nBar"),
      'code' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => 'foo/bar',
            'body' => $bw.'_SOME_CONST',
          ),
        }),
      'path' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => 'foo/'.$bw.'/',
            'body' => 'junk',
          ),
        }),
      'the badwords list itself' => (new ShipItChangeset())
        ->withDiffs(ImmVector {
          shape(
            'path' => 'foo/bar/FBConfidentialFilter.php',
            'body' => 'junk',
          ),
        }),
    };
    return $out->mapWithKey(($k, $v) ==> [$v->withID($k)])->toArray();
  }

  /**
   * @dataProvider exampleBadwordChangesets
   * @expectedException \HH\InvariantException
   */
  public function testBadwords(ShipItChangeset $changeset): void {
    FBCommonFilters::applyAll($changeset);
    // assertion is the @expectedException
  }

  public function testAcceptableUseOfBadwords(): void {
    $out = FBCommonFilters::applyAll(
      (new ShipItChangeset())->withMessage(
        "Summary: foo\n\nTest Plan: ".FBConfidentialFilter::EXAMPLE_BAD_WORD,
      )
    );
    $this->assertSame('Summary: foo', $out->getMessage());

    $out = FBCommonFilters::applyAll(
      (new ShipItChangeset())->withMessage(
        "Summary: foo\n\nFacebook: ".FBConfidentialFilter::EXAMPLE_BAD_WORD,
      )
    );
    $this->assertSame('Summary: foo', $out->getMessage());

    $out = FBCommonFilters::applyAll(
      (new ShipItChangeset())->withDiffs(ImmVector {
        shape(
          'path' => 'foo/fbonly/bar',
          'body' => FBConfidentialFilter::EXAMPLE_BAD_WORD,
        ),
        shape(
          'path' => 'herp/derp',
          'body' => 'junk',
        ),
      })
    );
    $this->assertEquals(
      ['herp/derp'],
      $out->getDiffs()->map($diff ==> $diff['path'])->toArray(),
    );
  }

  public function testFBAuthorWithoutGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>');
    $out = FBCommonFilters::restoreGitHubAuthor($in);
    $this->assertSame($in->getAuthor(), $out->getAuthor());
  }

  public function testFBAuthorWithGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>')
      ->withMessage('GitHub Author: Fred Emmott <fe@fb.com>');
    $out = FBCommonFilters::restoreGitHubAuthor($in);
    $this->assertSame(
      'Fred Emmott <fe@fb.com>',
      $out->getAuthor(),
    );
    $this->assertSame(
      $in->getMessage()."\n\nPulled By: JoelMarcey",
      $out->getMessage(),
    );
  }

  public function exampleFacebookDirectories():array<(string, bool)> {
    return [
      /* tuple(string $path, bool $private) */
      tuple('facebook', true),
      tuple('foo/facebook', true),
      tuple('com/facebook', false),
      tuple('foo/bar/facebook', true),
      tuple('java/com/facebook', false),
      tuple('facebook/com/facebook', true),
      tuple('facebook/foo/com/facebook', true),
      tuple('foo/facebook/com/facebook', true),
      tuple('foo/java/com/facebook', false),
      tuple('foo/bar/java/com/facebook', false),
      tuple('src/java/com/facebook', false),
      tuple('foo/com/facebook', false),
      tuple('foo/bar/com/facebook', false),
      tuple('foo/bar/baz/facebook', true),
    ];
  }

  /**
   * @dataProvider exampleFacebookDirectories
   */
  public function testFacebookDirectories(string $dir, bool $private): void {
    $file = $dir.'/foo';
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => $file, 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::stripCommonFiles($changeset);

    if ($private) {
      $expected = [ ];
    } else {
      $expected = [ $file ];
    }
    $actual = $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray();
    $this->assertEquals($expected, $actual);
  }

  public function testPrivateFileInPublicFacebookDir(): void {
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => 'foo/com/facebook/TARGETS', 'body' => 'junk'),
      shape('path' => 'foo/com/facebook/something', 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::stripCommonFiles($changeset);
    $this->assertEquals(
      [ 'foo/com/facebook/something' ],
      $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray(),
    );
  }
}
