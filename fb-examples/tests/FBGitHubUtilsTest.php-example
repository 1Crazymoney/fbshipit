<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

final class FBGitHubUtilsTest extends BaseTest {
  public function exampleProjectCredentials(
  ): array<(FBGitHubUtils::TAllCredentials, string, string, string, string)> {
    return [
      tuple(
        array(
          'FACEBOOK_HHVM' => array(
            'hhvm-bot' => shape(
              'access_token' => 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeef',
            ),
          ),
          'FACEBOOK_DEFAULT' => array(
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ),
        ),
        'facebook',
        'hhvm',
        '/^hhvm-bot$/',
        '/^hhvm.+@fb.com$/',
      ),
      tuple(
        array(
          'FACEBOOK_DEFAULT' => array(
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ),
        ),
        'facebook',
        'not-a-real-project',
        '/^facebook-github-bot-*\d*$/',
        '/^facebook-github-bot.*@fb.com$/',
      ),
    ];
  }

  static private function getCredentialsForProjectFrom(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
    ?ShipItGitHubCredentialOverrides $overrides = null,
  ): ShipItGitHubCredentials {
    return self::invoke_static_bypass_visibility(
      FBGitHubUtils::class,
      'getCredentialsForProjectFrom',
      $credentials,
      $organization,
      $project,
      $overrides,
    );
  }

  /**
   * @dataProvider exampleProjectCredentials
   */
  public function testPerProjectCredentials(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
    string $user_regexp,
    string $email_regexp,
  ): void {
    $credentials = self::getCredentialsForProjectFrom(
      $credentials,
      $organization,
      $project,
    );

    $this->assertRegExp(
      $user_regexp,
      $credentials['user'],
    );

    $this->assertRegExp(
      $email_regexp,
      $credentials['email'],
    );

    $this->assertLooksLikeAPIToken($credentials['password']);

    // nameof('facebook-github-bot-1') === 'Facebook Github Bot 1'
    $this->assertSame(
      ucwords(strtr($credentials['user'], '-', ' ')),
      $credentials['name'],
    );
  }

  public function exampleOverrides(
  ): array<array<ShipItGitHubCredentialOverrides>> {
    return array(
      array(
        shape(
          'name' => 'Foo Bar',
          'email' => 'foo@example.com',
        ),
      ),
      array(
        shape(
          'name' => 'Foo Bar',
          'email' => null,
        ),
      ),
      array(
        shape(
          'name' => null,
          'email' => 'foo@example.com',
        ),
      ),
      array(
        shape(
          'name' => null,
          'email' => null,
        ),
      )
    );
  }

  /**
   * @dataProvider exampleOverrides
   */
  public function testOverrides(
    ShipItGitHubCredentialOverrides $override,
  ): void {
    $credentials = self::getCredentialsForProjectFrom(
      $this->exampleProjectCredentials()[1][0],
      'facebook',
      'some-project',
      $override,
    );
    if ($override['name'] !== null) {
      $this->assertSame($override['name'], $credentials['name']);
    } else {
      // nameof('facebook-github-bot-1') === 'Facebook Github Bot 1'
      $this->assertSame(
        ucwords(strtr($credentials['user'], '-', ' ')),
        $credentials['name'],
      );
    }
    if ($override['email'] !== null) {
      $this->assertSame($override['email'], $credentials['email']);
    } else {
      $this->assertSame(
        $credentials['user'].'-bot@fb.com',
        $credentials['email'],
      );
    }
  }

  private function assertLooksLikeAPIToken(
    string $password,
  ): void {
    $this->assertTrue(
      strlen($password) === 40,
      'Password field has unexpected length: '.strlen($password),
    );
    $this->assertTrue(
      ctype_xdigit($password),
      'Password field is not hex-like',
    );
  }
}
