<?hh
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;


final class HHVMTest extends FBProjectBaseTest {
  public function examplesForFilteredSections(
  ): array<(ImmMap<string, string>,ImmMap<string, string>)> {
    return [
      tuple(
        ImmMap {
          'summary' => 'foo',
          'test plan' => 'bar',
          'facebook' => 'baz',
          'differential revision' => 'D12345',
        },
        ImmMap {
          'summary' => 'foo',
          'differential revision' => 'D12345',
        },
      ),
    ];
  }

  /**
   * @dataProvider examplesForFilteredSections
   */
  public function testFilteredSections(
    ImmMap<string, string> $in,
    ImmMap<string, string> $expected,
  ): void {
    $changeset = (new ShipItChangeset())
      ->withMessage(ShipItMessageSections::buildMessage($in));
    $changeset = self::map($changeset);
    $out = ShipItMessageSections::getSections(
      $changeset,
      FBCommonFilters::getSupportedMessageSectionNames(),
    );
    $this->assertEquals($expected, $out->toImmMap());
  }

  protected static function map(
    ShipItChangeset $changeset
  ): ShipItChangeset {
    return ShipItHHVM::filterChangeset(
      $changeset,
    );
  }

  public function examplePathMappings(
  ): array<(ImmVector<string>, ImmVector<string>)> {
    return [
      tuple(
        ImmVector { 'fbcode/hphp/foo' },
        ImmVector { 'hphp/foo' },
      ),
      tuple(
        ImmVector { 'fbcode/hphp/public_tld/foo' },
        ImmVector { 'foo' },
      ),
      tuple(
        ImmVector { 'fbcode/not_hphp/foo', 'fbcode/hphp/bar' },
        ImmVector { 'hphp/bar' },
      ),
    ];
  }

  /**
   * @dataProvider examplePathMappings
   */
  public function testPathMappings(
    ImmVector<string> $paths_in,
    ImmVector<string> $paths_expected,
  ): void {
    $diffs = $paths_in->map($path ==> shape('path' => $path, 'body' => 'junk'));
    $changeset = (new ShipItChangeset())->withDiffs($diffs);
    $changeset = self::map($changeset);
    $this->assertEquals(
      $paths_expected,
      $changeset->getDiffs()->map($diff ==> $diff['path']),
    );
  }

  public function testThirdPartySubmodule(): void {
    // The bulk of the check is in SubmoduleTest
    $changeset = ShipItRepoHG::getChangesetFromExportedPatch(
      file_get_contents(
        __DIR__.'/../../hg-diffs/submodule-hhvm-third-party.diff'
      )
    );
    $this->assertNotNull($changeset);
    assert($changeset !== null); // typechecker

    $changeset = self::map($changeset);
    $this->assertEquals(
      ImmVector { 'third-party' },
      $changeset->getDiffs()->map($diff ==> $diff['path']),
    );
  }

  protected function getExamplePublicPath(): string {
    return 'fbcode/hphp/foo';
  }
}
