<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;


final class FBCommonFiltersTest extends BaseTest {
  public function testFBAuthorWithoutGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>');
    $out = FBCommonFilters::applyAll($in);
    $this->assertSame($in->getAuthor(), $out->getAuthor());
  }

  public function testFBAuthorWithGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>')
      ->withMessage('GitHub Author: Fred Emmott <fe@fb.com>');
    $out = FBCommonFilters::applyAll($in);
    $this->assertSame(
      'Fred Emmott <fe@fb.com>',
      $out->getAuthor(),
    );
    $this->assertSame(
      "Pulled By: JoelMarcey",
      $out->getMessage(),
    );
  }

  public function examplesForAuthorEmailCorrection(
  ): array<(string, string)> {
    return [
      tuple('Email change <fredemmott@fb.com>', 'Fred Emmott <fe@fb.com>'),
      tuple(
        'Ex Employee email change <sgolemon@fb.com>',
        'Sara Golemon <saramg@fb.com>',
      ),
      tuple('Some Bot <svcscm@fb.com>', 'Some Bot <svcscm@fb.com>'),
      tuple(
        'Invalid User <thisuserdoesnotexist@fb.com>',
        'Invalid User <thisuserdoesnotexist@fb.com>',
      ),
    ];
  }

  /**
   * @dataProvider examplesForAuthorEmailCorrection
   */
  public function testAuthorEmailCorrection(
    string $in_author,
    string $expected_author,
  ): void {
    // fredemmott@ => fe@
    $changeset = (new ShipItChangeset())
      ->withAuthor($in_author)
      |> FBCommonFilters::applyAll($$);
    $this->assertSame(
      $expected_author,
      $changeset->getAuthor(),
    );
  }

  public function testSVNAuthor(): void {
    $fake_uuid = \str_repeat('a', 36);
    $in = (new ShipItChangeset())
      ->withAuthor('fredemmott@'.$fake_uuid);
    $out = ShipItUserFilters::rewriteSVNAuthor(
      $in,
      FBToGitHubUserInfo::class,
    );
    $this->assertSame(
      'Fred Emmott <fe@fb.com>',
      $out->getAuthor(),
    );
  }

  public function exampleFacebookDirectories():array<(string, bool)> {
    return [
      /* tuple(string $path, bool $private) */
      tuple('facebook', true),
      tuple('foo/facebook', true),
      tuple('com/facebook', false),
      tuple('foo/bar/facebook', true),
      tuple('java/com/facebook', false),
      tuple('facebook/com/facebook', true),
      tuple('facebook/foo/com/facebook', true),
      tuple('foo/facebook/com/facebook', true),
      tuple('foo/java/com/facebook', false),
      tuple('foo/bar/java/com/facebook', false),
      tuple('src/java/com/facebook', false),
      tuple('foo/com/facebook', false),
      tuple('foo/bar/com/facebook', false),
      tuple('foo/bar/baz/facebook', true),
    ];
  }

  /**
   * @dataProvider exampleFacebookDirectories
   */
  public function testFacebookDirectories(string $dir, bool $private): void {
    $file = $dir.'/foo';
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => $file, 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::applyAll($changeset);

    if ($private) {
      $expected = [ ];
    } else {
      $expected = [ $file ];
    }
    $actual = $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray();
    $this->assertEquals($expected, $actual);
  }

  public function testPrivateFileInPublicFacebookDir(): void {
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => 'foo/com/facebook/TARGETS', 'body' => 'junk'),
      shape('path' => 'foo/com/facebook/something', 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::applyAll($changeset);
    $this->assertEquals(
      [ 'foo/com/facebook/something' ],
      $changeset->getDiffs()->map($diff ==> $diff['path'])->toArray(),
    );
  }

  public function testOverideUnitFailuresStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Summary: @override-unit-failures');
    $out = FBCommonFilters::applyAll($in);
    $this->assertSame(
      '',
      $out->getMessage(),
    );
  }

  public function testBuildDirectiveStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage("Summary: Test diff\nblah @build[project1,project2]");
    $out = FBCommonFilters::applyAll($in);
    $this->assertSame(
      "Summary:\nTest diff\nblah",
      $out->getMessage(),
    );
  }

  public function testAccept2ShipStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Summary: #accept2ship');
    $out = FBCommonFilters::applyAll($in);
    $this->assertSame(
      '',
      $out->getMessage(),
    );

    // testing multi-line strings
    $in = (new ShipItChangeset())
      ->withMessage(
    'some_prefix
    #accept2ship
    some_suffix');
    $out = FBCommonFilters::stripAccept2Ship($in);
    $this->assertSame(
    'some_prefix
        some_suffix',
      $out->getMessage(),
    );

    $in = (new ShipItChangeset())
      ->withMessage("some_prefix\n#accept2ship\nsome_suffix");
    $out = FBCommonFilters::stripAccept2Ship($in);
    $this->assertSame(
      "some_prefix\nsome_suffix",
      $out->getMessage(),
    );
  }

  public function testFilterMessageSections(): void {
    foreach (FBCommonFilters::getSupportedMessageSectionNames() as $section) {
      $changeset = (new ShipItChangeset())
        ->withMessage(\sprintf("%s:\n some text", $section));
      $this->assertEquals(
        '',
        FBCommonFilters::filterMessageSections($changeset, ImmSet {})
          ->getMessage(),
        "Strips section '".$section."'",
      );
      $this->assertEquals(
        \sprintf("%s: some text", \ucwords($section)),
        FBCommonFilters::filterMessageSections($changeset, ImmSet {$section})
          ->getMessage(),
        "Keeps section '".$section."'",
      );
    }
  }
}
