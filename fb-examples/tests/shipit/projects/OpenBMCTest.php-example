<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

final class OpenbmcTest extends FBProjectBaseTest {

  <<__Override>>
  protected static function map(ShipItChangeset $changeset): ShipItChangeset {
    return ShipItOpenBMC::filterChangeset($changeset);
  }

  <<__Override>>
  public static function getExamplePathMappings(): ImmMap<string, ?string> {
    return ImmMap {
      'source_mirror/bash-4.3.tar.gz' => null,
      'facebook/arcanist/__phutil_library_map__.php' => null,
      'conf/layer.conf' => 'conf/layer.conf',
      'github/meta-facebook/classes/fb-only-network.bbclass' =>
        'meta-facebook/classes/fb-only-network.bbclass',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot.inc',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/verified-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/verified-boot.inc',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed.inc' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed.inc',
    };
  }

  <<__Override>>
  protected function removesSummariesByDefault(): bool {
    return false;
  }

  <<__Override>>
  public function testGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>"
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
  }

  <<__Override>>
  public function testGitHubAuthorWithSupportedFieldAfter(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n".
        "Github PR Sync: foo"
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
  }

  <<__Override>>
  public function testPulledBy(): void {
   $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>"
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains('Pulled By: jmehta', $out->getMessage());
  }

  <<__Override>>
  public function testPulledByWithUnixnameDifferentToGithub(): void {
   $in = (new ShipItChangeset())
     ->withMessage(
       "Closes https://github.com/facebook/openbmc/pull/219\n".
       "GitHub Author: Foo Bar <foobar@example.com>"
     )
     ->withAuthor("Sai Dasari <sdasari@fb.com>");
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains('Pulled By: sdasari73', $out->getMessage());
  }

  <<__Override>>
  public function testPulledByWithBotAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: jmehta"
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertContains('Pulled By: jmehta', $out->getMessage());
  }

  <<__Override>>
  public function testPulledByWithBotAuthorAndMultipleReviewers(): void {
   $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: jmehta, sdasari"
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
   $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
    $this->assertNotContains('Pulled By:', $out->getMessage());
    $this->assertContains('Reviewed By: jmehta, sdasari73', $out->getMessage());
  }

  <<__Override>>
  public function testNoPulledByIfNoGitHubAuthor(): void {
  $in = (new ShipItChangeset())
      ->withAuthor('Jubin Mehta <jmehta@fb.com>');
    $out = static::map($in);
    $this->assertSame('Jubin Mehta <jmehta@fb.com>', $out->getAuthor());
  }

  public function testNoReviwedBy(): void {
   $in = (new ShipItChangeset())
     ->withMessage(
       "Closes https://github.com/facebook/openbmc/pull/219\n".
       "GitHub Author: Foo Bar <foobar@example.com>"
     )
    ->withAuthor('Jubin Mehta <jmehta@fb.com>');
   $out = static::map($in);
   $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
   $this->assertContains('Reviewed By: jmehta', $out->getMessage());
  }

  public function testBotReviwedBy(): void {
   $in = (new ShipItChangeset())
     ->withMessage(
       "Closes https://github.com/facebook/openbmc/pull/219\n".
       "GitHub Author: Foo Bar <foobar@example.com>\n\n".
       "Reviewed By: svcscm"
     )
     ->withAuthor('Jubin Mehta <jmehta@fb.com>');
   $out = static::map($in);
   $this->assertEquals('Foo Bar <foobar@example.com>', $out->getAuthor());
   $this->assertContains('Reviewed By: jmehta', $out->getMessage());
  }
}
